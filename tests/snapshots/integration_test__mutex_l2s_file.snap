---
source: tests/integration_test.rs
expression: subs
---
[
    Sub {
        l2s_binder: "l2s_s",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.pc_finished(V0) ",
        name: "l2s_s_3",
    },
    Sub {
        l2s_binder: "l2s_w",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.scheduled(V0) ",
        name: "l2s_w_1",
    },
    Sub {
        l2s_binder: "l2s_g",
        binders: [],
        expr: "~(forall T. mutex_protocol.d(T)) ",
        name: "l2s_g_1",
    },
    Sub {
        l2s_binder: "l2s_s",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.pc_atomic_store(V0) ",
        name: "l2s_s_2",
    },
    Sub {
        l2s_binder: "_old_l2s_g",
        binders: [],
        expr: "~mutex_protocol.pc_finished(mutex_protocol.t0) ",
        name: "_old_l2s_g_0",
    },
    Sub {
        l2s_binder: "_old_l2s_g",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "~$l2s_g V0:mutex_protocol.thread. ~mutex_protocol.scheduled(V0)(V0) ",
        name: "_old_l2s_g_4",
    },
    Sub {
        l2s_binder: "l2s_s",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.pc_kernel_wait(V0) ",
        name: "l2s_s_6",
    },
    Sub {
        l2s_binder: "l2s_s",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.pc_futex_wait(V0) ",
        name: "l2s_s_4",
    },
    Sub {
        l2s_binder: "l2s_s",
        binders: [],
        expr: "mutex_protocol.locked ",
        name: "l2s_s_0",
    },
    Sub {
        l2s_binder: "_old_l2s_g",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "~mutex_protocol.scheduled(V0) ",
        name: "_old_l2s_g_3",
    },
    Sub {
        l2s_binder: "l2s_w",
        binders: [],
        expr: "(forall T. mutex_protocol.d(T)) ",
        name: "l2s_w_0",
    },
    Sub {
        l2s_binder: "_old_l2s_g",
        binders: [],
        expr: "~(forall T. mutex_protocol.d(T)) ",
        name: "_old_l2s_g_1",
    },
    Sub {
        l2s_binder: "l2s_g",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "~mutex_protocol.pc_finished(V0) ",
        name: "l2s_g_2",
    },
    Sub {
        l2s_binder: "l2s_s",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.pc_atomic_cas(V0) ",
        name: "l2s_s_1",
    },
    Sub {
        l2s_binder: "l2s_g",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "~$l2s_g V0:mutex_protocol.thread. ~mutex_protocol.scheduled(V0)(V0) ",
        name: "l2s_g_4",
    },
    Sub {
        l2s_binder: "l2s_s",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.pc_futex_wake(V0) ",
        name: "l2s_s_5",
    },
    Sub {
        l2s_binder: "l2s_s",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "mutex_protocol.queue(V0) ",
        name: "l2s_s_7",
    },
    Sub {
        l2s_binder: "l2s_g",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "~mutex_protocol.scheduled(V0) ",
        name: "l2s_g_3",
    },
    Sub {
        l2s_binder: "l2s_g",
        binders: [],
        expr: "~mutex_protocol.pc_finished(mutex_protocol.t0) ",
        name: "l2s_g_0",
    },
    Sub {
        l2s_binder: "_old_l2s_g",
        binders: [
            "V0:mutex_protocol.thread",
        ],
        expr: "~mutex_protocol.pc_finished(V0) ",
        name: "_old_l2s_g_2",
    },
]
