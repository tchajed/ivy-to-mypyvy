---
source: tests/integration_test.rs
expression: output
---
sort thread

mutable relation _old_l2s_g_0()
mutable relation _old_l2s_g_1()
mutable relation _old_l2s_g_2(?)
mutable relation _old_l2s_g_3(?)
mutable relation _old_l2s_g_4(?)
mutable relation _old_l2s_g_5(?)
mutable relation l2s_a(thread)
mutable relation l2s_d(?)
mutable relation l2s_frozen()
mutable relation l2s_g_0()
mutable relation l2s_g_1()
mutable relation l2s_g_2(?)
mutable relation l2s_g_3(?)
mutable relation l2s_g_4(?)
mutable relation l2s_g_5(?)
mutable relation l2s_s_0(?)
mutable relation l2s_s_1(?)
mutable relation l2s_s_2(?)
mutable relation l2s_s_3(?, ?)
mutable relation l2s_s_4(?)
mutable relation l2s_s_5(?)
mutable relation l2s_saved()
mutable relation l2s_w_0()
mutable relation l2s_w_1(?)
mutable relation l2s_waiting()
mutable relation m(?, ?)
mutable relation next_ticket(?)
mutable relation pc1(thread)
mutable relation pc2(thread)
mutable relation pc3(thread)
mutable relation scheduled(?)
mutable relation service(?)
mutable relation zero
mutable relation havoc_l2s_g_0()
mutable relation havoc_l2s_g_1()
mutable relation havoc_l2s_g_2(?)
mutable relation havoc_l2s_g_3(?)
mutable relation havoc_l2s_g_4(?)
mutable relation havoc_l2s_g_5(?)
mutable relation __error

init !__error
init pc1(T) <-> true
init pc2(T) <-> false
init pc3(T) <-> false
init service(K) <-> (K = zero)
init next_ticket(K) <-> (K = zero)
init m(T, K) <-> (K = zero)
init scheduled(T) <-> false
init l2s_waiting <-> true
init l2s_frozen <-> false
init l2s_saved <-> false
init l2s_d(zero) <-> true
init l2s_d(t0) <-> true
init l2s_w_1(V0) <-> ((l2s_d(V0) & !scheduled(V0)) & !l2s_g_3(V0))
init l2s_w_0 <-> ((!(pc2(t0) & l2s_g_0)) & !l2s_g_1)
init (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
init (forall V0. l2s_g_3(V0) -> !scheduled(V0))
init (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
init (l2s_g_0 -> !pc3(t0))
init (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
init (forall V0. l2s_g_2(V0) -> !pc3(V0))
init (!(((exists T0. !l2s_g_5(T0)) -> !l2s_g_1) -> ((forall T. l2s_g_4(T)) -> (forall T. l2s_g_5(T)))))

transition step12(t, next_ticket0, s)
  modifies _old_l2s_g_1, _old_l2s_g_3, _old_l2s_g_4, _old_l2s_g_5, l2s_d, l2s_g_1, l2s_g_3, l2s_g_4, l2s_g_5, l2s_w_0, l2s_w_1, m, next_ticket, pc1, pc2, scheduled
  # assumes:
  & (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
  & (forall V0. l2s_g_3(V0) -> !scheduled(V0))
  & (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
  & (l2s_g_0 -> !pc3(t0))
  & (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
  & (forall V0. l2s_g_2(V0) -> !pc3(V0))
  & pc1(t)
  & next_ticket(next_ticket0)
  & ((!(le(s, next_ticket0))) & (forall Z. (!(le(Z, next_ticket0))) -> (le(s, Z))))
  & (forall V0. l2s_g_5(V0) -> havoc_l2s_g_5(V0))
  & (forall V0. (!l2s_g_5(V0) & (!(pc2(V0) & l2s_g_2(V0)))) -> !havoc_l2s_g_5(V0))
  & (l2s_g_1 -> havoc_l2s_g_1)
  & ((!l2s_g_1 & (!(pc2(t0) & l2s_g_0))) -> !havoc_l2s_g_1)
  & (forall V0. havoc_l2s_g_5(V0) -> (!((if V0 = t then true else pc2(V0)) & l2s_g_2(V0))))
  & (havoc_l2s_g_1 -> (!((if t0 = t then true else pc2(t0)) & l2s_g_0)))
  & (forall V0. l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!l2s_g_3(V0) & !scheduled(V0)) -> !havoc_l2s_g_3(V0))
  & (forall V0. l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> (!(V0 = t)))
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!havoc_l2s_g_3(V0) & (!(V0 = t))) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!havoc_l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> !false)
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  # transitions:
  & (new(_old_l2s_g_1) <-> l2s_g_1)
  & (new(_old_l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(_old_l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(_old_l2s_g_5(V0)) <-> l2s_g_5(V0))
  & (new(l2s_d(T0)) <-> if T0 = t0 then true else (if T0 = zero then true else (if T0 = s then true else (if T0 = next_ticket0 then true else (if T0 = t then true else l2s_d(T0))))))
  & (new(l2s_g_1) <-> havoc_l2s_g_1)
  & (new(l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(l2s_g_5(V0)) <-> havoc_l2s_g_5(V0))
  & (new(l2s_w_0) <-> (l2s_w_0 & (!((if t0 = t then true else pc2(t0)) & l2s_g_0))) & !havoc_l2s_g_1)
  & (new(l2s_w_1(V0)) <-> (((l2s_w_1(V0) & (!(V0 = t))) & !havoc_l2s_g_3(V0)) & !false) & !havoc_l2s_g_3(V0))
  & (new(m(T, K)) <-> ((T = t) & (K = next_ticket0)) | ((T != t) & (m(T, K))))
  & (new(next_ticket(K)) <-> K = s)
  & (new(pc1(T)) <-> if T = t then false else pc1(T))
  & (new(pc2(T)) <-> if T = t then true else pc2(T))
  & (new(scheduled(T)) <-> false)

transition step22(t, k, service0)
  modifies _old_l2s_g_3, _old_l2s_g_4, l2s_d, l2s_g_3, l2s_g_4, l2s_w_1, scheduled
  # assumes:
  & (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
  & (forall V0. l2s_g_3(V0) -> !scheduled(V0))
  & (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
  & (l2s_g_0 -> !pc3(t0))
  & (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
  & (forall V0. l2s_g_2(V0) -> !pc3(V0))
  & pc2(t)
  & (m(t, k))
  & service(service0)
  & (!(le(k, service0)))
  & (forall V0. l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!l2s_g_3(V0) & !scheduled(V0)) -> !havoc_l2s_g_3(V0))
  & (forall V0. l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> (!(V0 = t)))
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!havoc_l2s_g_3(V0) & (!(V0 = t))) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!havoc_l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> !false)
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  # transitions:
  & (new(_old_l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(_old_l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(l2s_d(T0)) <-> if T0 = t0 then true else (if T0 = zero then true else (if T0 = service0 then true else (if T0 = k then true else (if T0 = t then true else l2s_d(T0))))))
  & (new(l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(l2s_w_1(V0)) <-> (((l2s_w_1(V0) & (!(V0 = t))) & !havoc_l2s_g_3(V0)) & !false) & !havoc_l2s_g_3(V0))
  & (new(scheduled(T)) <-> false)

transition step23(t, k, service0)
  modifies _old_l2s_g_0, _old_l2s_g_1, _old_l2s_g_2, _old_l2s_g_3, _old_l2s_g_4, _old_l2s_g_5, l2s_d, l2s_g_0, l2s_g_1, l2s_g_2, l2s_g_3, l2s_g_4, l2s_g_5, l2s_w_0, l2s_w_1, pc2, pc3, scheduled
  # assumes:
  & (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
  & (forall V0. l2s_g_3(V0) -> !scheduled(V0))
  & (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
  & (l2s_g_0 -> !pc3(t0))
  & (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
  & (forall V0. l2s_g_2(V0) -> !pc3(V0))
  & pc2(t)
  & (m(t, k))
  & service(service0)
  & (le(k, service0))
  & (forall V0. l2s_g_5(V0) -> havoc_l2s_g_5(V0))
  & (forall V0. (!l2s_g_5(V0) & (!(pc2(V0) & l2s_g_2(V0)))) -> !havoc_l2s_g_5(V0))
  & (l2s_g_1 -> havoc_l2s_g_1)
  & ((!l2s_g_1 & (!(pc2(t0) & l2s_g_0))) -> !havoc_l2s_g_1)
  & (forall V0. havoc_l2s_g_5(V0) -> (!((if V0 = t then false else pc2(V0)) & l2s_g_2(V0))))
  & (havoc_l2s_g_1 -> (!((if t0 = t then false else pc2(t0)) & l2s_g_0)))
  & (forall V0. havoc_l2s_g_5(V0) -> havoc_l2s_g_5(V0))
  & (forall V0. (!havoc_l2s_g_5(V0) & (!((if V0 = t then false else pc2(V0)) & havoc_l2s_g_2(V0)))) -> !havoc_l2s_g_5(V0))
  & (l2s_g_0 -> havoc_l2s_g_0)
  & ((!l2s_g_0 & !pc3(t0)) -> !havoc_l2s_g_0)
  & (havoc_l2s_g_1 -> havoc_l2s_g_1)
  & ((!havoc_l2s_g_1 & (!((if t0 = t then false else pc2(t0)) & havoc_l2s_g_0))) -> !havoc_l2s_g_1)
  & (forall V0. l2s_g_2(V0) -> havoc_l2s_g_2(V0))
  & (forall V0. (!l2s_g_2(V0) & !pc3(V0)) -> !havoc_l2s_g_2(V0))
  & (forall V0. havoc_l2s_g_5(V0) -> (!((if V0 = t then false else pc2(V0)) & havoc_l2s_g_2(V0))))
  & (havoc_l2s_g_0 -> (!(if t0 = t then true else pc3(t0))))
  & (havoc_l2s_g_1 -> (!((if t0 = t then false else pc2(t0)) & havoc_l2s_g_0)))
  & (forall V0. havoc_l2s_g_2(V0) -> (!(if V0 = t then true else pc3(V0))))
  & (forall V0. l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!l2s_g_3(V0) & !scheduled(V0)) -> !havoc_l2s_g_3(V0))
  & (forall V0. l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> (!(V0 = t)))
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!havoc_l2s_g_3(V0) & (!(V0 = t))) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!havoc_l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> !false)
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  # transitions:
  & (new(_old_l2s_g_0) <-> l2s_g_0)
  & (new(_old_l2s_g_1) <-> havoc_l2s_g_1)
  & (new(_old_l2s_g_2(V0)) <-> l2s_g_2(V0))
  & (new(_old_l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(_old_l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(_old_l2s_g_5(V0)) <-> havoc_l2s_g_5(V0))
  & (new(l2s_d(T0)) <-> if T0 = t0 then true else (if T0 = zero then true else (if T0 = service0 then true else (if T0 = k then true else (if T0 = t then true else l2s_d(T0))))))
  & (new(l2s_g_0) <-> havoc_l2s_g_0)
  & (new(l2s_g_1) <-> havoc_l2s_g_1)
  & (new(l2s_g_2(V0)) <-> havoc_l2s_g_2(V0))
  & (new(l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(l2s_g_5(V0)) <-> havoc_l2s_g_5(V0))
  & (new(l2s_w_0) <-> (((l2s_w_0 & (!((if t0 = t then false else pc2(t0)) & l2s_g_0))) & !havoc_l2s_g_1) & (!((if t0 = t then false else pc2(t0)) & havoc_l2s_g_0))) & !havoc_l2s_g_1)
  & (new(l2s_w_1(V0)) <-> (((l2s_w_1(V0) & (!(V0 = t))) & !havoc_l2s_g_3(V0)) & !false) & !havoc_l2s_g_3(V0))
  & (new(pc2(T)) <-> if T = t then false else pc2(T))
  & (new(pc3(T)) <-> if T = t then true else pc3(T))
  & (new(scheduled(T)) <-> false)

transition step31(t, s, service0)
  modifies _old_l2s_g_0, _old_l2s_g_1, _old_l2s_g_2, _old_l2s_g_3, _old_l2s_g_4, _old_l2s_g_5, l2s_d, l2s_g_0, l2s_g_1, l2s_g_2, l2s_g_3, l2s_g_4, l2s_g_5, l2s_w_0, l2s_w_1, pc1, pc3, scheduled, service
  # assumes:
  & (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
  & (forall V0. l2s_g_3(V0) -> !scheduled(V0))
  & (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
  & (l2s_g_0 -> !pc3(t0))
  & (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
  & (forall V0. l2s_g_2(V0) -> !pc3(V0))
  & pc3(t)
  & service(service0)
  & ((!(le(s, service0))) & (forall Z. (!(le(Z, service0))) -> (le(s, Z))))
  & (forall V0. l2s_g_5(V0) -> havoc_l2s_g_5(V0))
  & (forall V0. (!l2s_g_5(V0) & (!(pc2(V0) & havoc_l2s_g_2(V0)))) -> !havoc_l2s_g_5(V0))
  & (l2s_g_0 -> havoc_l2s_g_0)
  & ((!l2s_g_0 & !pc3(t0)) -> !havoc_l2s_g_0)
  & (l2s_g_1 -> havoc_l2s_g_1)
  & ((!l2s_g_1 & (!(pc2(t0) & havoc_l2s_g_0))) -> !havoc_l2s_g_1)
  & (forall V0. l2s_g_2(V0) -> havoc_l2s_g_2(V0))
  & (forall V0. (!l2s_g_2(V0) & !pc3(V0)) -> !havoc_l2s_g_2(V0))
  & (forall V0. havoc_l2s_g_5(V0) -> (!(pc2(V0) & havoc_l2s_g_2(V0))))
  & (havoc_l2s_g_0 -> (!(if t0 = t then false else pc3(t0))))
  & (havoc_l2s_g_1 -> (!(pc2(t0) & havoc_l2s_g_0)))
  & (forall V0. havoc_l2s_g_2(V0) -> (!(if V0 = t then false else pc3(V0))))
  & (forall V0. l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!l2s_g_3(V0) & !scheduled(V0)) -> !havoc_l2s_g_3(V0))
  & (forall V0. l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> (!(V0 = t)))
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> havoc_l2s_g_3(V0))
  & (forall V0. (!havoc_l2s_g_3(V0) & (!(V0 = t))) -> !havoc_l2s_g_3(V0))
  & (forall V0. havoc_l2s_g_4(V0) -> havoc_l2s_g_4(V0))
  & (forall V0. (!havoc_l2s_g_4(V0) & !havoc_l2s_g_3(V0)) -> !havoc_l2s_g_4(V0))
  & (forall V0. havoc_l2s_g_3(V0) -> !false)
  & (forall V0. havoc_l2s_g_4(V0) -> !havoc_l2s_g_3(V0))
  # transitions:
  & (new(_old_l2s_g_0) <-> l2s_g_0)
  & (new(_old_l2s_g_1) <-> l2s_g_1)
  & (new(_old_l2s_g_2(V0)) <-> l2s_g_2(V0))
  & (new(_old_l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(_old_l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(_old_l2s_g_5(V0)) <-> l2s_g_5(V0))
  & (new(l2s_d(T0)) <-> if T0 = t0 then true else (if T0 = zero then true else (if T0 = service0 then true else (if T0 = s then true else (if T0 = t then true else l2s_d(T0))))))
  & (new(l2s_g_0) <-> havoc_l2s_g_0)
  & (new(l2s_g_1) <-> havoc_l2s_g_1)
  & (new(l2s_g_2(V0)) <-> havoc_l2s_g_2(V0))
  & (new(l2s_g_3(V0)) <-> havoc_l2s_g_3(V0))
  & (new(l2s_g_4(V0)) <-> havoc_l2s_g_4(V0))
  & (new(l2s_g_5(V0)) <-> havoc_l2s_g_5(V0))
  & (new(l2s_w_0) <-> (l2s_w_0 & (!(pc2(t0) & havoc_l2s_g_0))) & !havoc_l2s_g_1)
  & (new(l2s_w_1(V0)) <-> (((l2s_w_1(V0) & (!(V0 = t))) & !havoc_l2s_g_3(V0)) & !false) & !havoc_l2s_g_3(V0))
  & (new(pc1(T)) <-> if T = t then true else pc1(T))
  & (new(pc3(T)) <-> if T = t then false else pc3(T))
  & (new(scheduled(T)) <-> false)
  & (new(service(K)) <-> K = s)

transition idle_then()
  modifies __error, l2s_a, l2s_d, l2s_frozen, l2s_waiting
  # assumes:
  & l2s_waiting
  & (forall V0. !l2s_w_1(V0))
  & !l2s_w_0
  & (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
  & (forall V0. l2s_g_3(V0) -> !scheduled(V0))
  & (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
  & (l2s_g_0 -> !pc3(t0))
  & (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
  & (forall V0. l2s_g_2(V0) -> !pc3(V0))
  # transitions:
  & (new(l2s_a(X)) <-> l2s_d(X))
  & (new(l2s_d(T0)) <-> if T0 = t0 then true else (if T0 = zero then true else l2s_d(T0)))
  & (new(l2s_frozen) <-> true)
  & (new(l2s_waiting) <-> false)
  # asserts:
  & ((!__error & (!((((((((l2s_saved & (forall V0. !l2s_w_1(V0))) & !l2s_w_0) & (forall V1. (forall V0. (l2s_d(V0) & l2s_d(V1)) -> ((l2s_s_3(V0, V1)) <-> (m(V0, V1)))))) & (forall V0. l2s_d(V0) -> (l2s_s_0(V0) <-> pc1(V0)))) & (forall V0. l2s_d(V0) -> (l2s_s_5(V0) <-> service(V0)))) & (forall V0. l2s_d(V0) -> (l2s_s_4(V0) <-> next_ticket(V0)))) & (forall V0. l2s_d(V0) -> (l2s_s_1(V0) <-> pc2(V0)))) & (forall V0. l2s_d(V0) -> (l2s_s_2(V0) <-> pc3(V0)))))) -> !new(__error))

transition idle_else_then()
  modifies __error, l2s_d, l2s_frozen, l2s_s_0, l2s_s_1, l2s_s_2, l2s_s_3, l2s_s_4, l2s_s_5, l2s_saved, l2s_w_0, l2s_w_1
  # assumes:
  & l2s_frozen
  & (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
  & (forall V0. l2s_g_3(V0) -> !scheduled(V0))
  & (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
  & (l2s_g_0 -> !pc3(t0))
  & (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
  & (forall V0. l2s_g_2(V0) -> !pc3(V0))
  # transitions:
  & (new(l2s_d(T0)) <-> if T0 = t0 then true else (if T0 = zero then true else l2s_d(T0)))
  & (new(l2s_frozen) <-> false)
  & (new(l2s_s_0(V0)) <-> pc1(V0))
  & (new(l2s_s_1(V0)) <-> pc2(V0))
  & (new(l2s_s_2(V0)) <-> pc3(V0))
  & (new(l2s_s_3(V0, V1)) <-> m(V0, V1))
  & (new(l2s_s_4(V0)) <-> next_ticket(V0))
  & (new(l2s_s_5(V0)) <-> service(V0))
  & (new(l2s_saved) <-> true)
  & (new(l2s_w_0) <-> (!(pc2(t0) & l2s_g_0)) & !l2s_g_1)
  & (new(l2s_w_1(V0)) <-> (l2s_d(V0) & !scheduled(V0)) & !l2s_g_3(V0))
  # asserts:
  & ((!__error & (!((((((((true & (forall V0. !((l2s_d(V0) & !scheduled(V0)) & !l2s_g_3(V0)))) & (!((!(pc2(t0) & l2s_g_0)) & !l2s_g_1))) & (forall V1. (forall V0. (l2s_a(V0) & l2s_a(V1)) -> ((m(V0, V1)) <-> (m(V0, V1)))))) & (forall V0. l2s_a(V0) -> (pc1(V0) <-> pc1(V0)))) & (forall V0. l2s_a(V0) -> (service(V0) <-> service(V0)))) & (forall V0. l2s_a(V0) -> (next_ticket(V0) <-> next_ticket(V0)))) & (forall V0. l2s_a(V0) -> (pc2(V0) <-> pc2(V0)))) & (forall V0. l2s_a(V0) -> (pc3(V0) <-> pc3(V0)))))) -> !new(__error))

transition idle_else_else()
  modifies __error, l2s_d
  # assumes:
  & (forall V0. l2s_g_4(V0) -> !l2s_g_3(V0))
  & (forall V0. l2s_g_3(V0) -> !scheduled(V0))
  & (l2s_g_1 -> (!(pc2(t0) & l2s_g_0)))
  & (l2s_g_0 -> !pc3(t0))
  & (forall V0. l2s_g_5(V0) -> (!(pc2(V0) & l2s_g_2(V0))))
  & (forall V0. l2s_g_2(V0) -> !pc3(V0))
  # transitions:
  & (new(l2s_d(T0)) <-> if T0 = t0 then true else (if T0 = zero then true else l2s_d(T0)))
  # asserts:
  & ((!__error & (!((((((((l2s_saved & (forall V0. !l2s_w_1(V0))) & !l2s_w_0) & (forall V1. (forall V0. (l2s_a(V0) & l2s_a(V1)) -> ((l2s_s_3(V0, V1)) <-> (m(V0, V1)))))) & (forall V0. l2s_a(V0) -> (l2s_s_0(V0) <-> pc1(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_5(V0) <-> service(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_4(V0) <-> next_ticket(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_1(V0) <-> pc2(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_2(V0) <-> pc3(V0)))))) -> !new(__error))


safety [assertions] !__error


