---
source: tests/integration_test.rs
expression: output
---
let
step_atomic_store = action(t:thread){
  l2s_d(t) := true;
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  assume pc_atomic_store(t);
  pc_atomic_store(t) := false;
  pc_futex_wake(t) := true;
  locked := false;
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := T:thread = t;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := false;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  l2s_d(t0) := true
}

step_futex_wake = action(t:thread){
  l2s_d(t) := true;
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  assume pc_futex_wake(t);
  pc_futex_wake(t) := false;
  if some t_q. queue(t_q) {
    queue(t_q) := false
  };
  _old_l2s_g_0 := l2s_g_0;
  l2s_g_0 := *;
  _old_l2s_g_2(V0) := l2s_g_2(V0);
  l2s_g_2(V0) := *;
  assume _old_l2s_g_0 -> l2s_g_0;
  assume (~_old_l2s_g_0 & ~pc_finished(t0)) -> ~l2s_g_0;
  assume (forall V0. _old_l2s_g_2(V0) -> l2s_g_2(V0));
  assume (forall V0. (~_old_l2s_g_2(V0) & ~pc_finished(V0)) -> ~l2s_g_2(V0));
  pc_finished(t) := true;
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := T:thread = t;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := false;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  l2s_d(t0) := true
}

step_futex_wait = action(t:thread){
  l2s_d(t) := true;
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  assume pc_futex_wait(t);
  pc_futex_wait(t) := false;
  if locked {
    pc_kernel_wait(t) := true;
    queue(t) := true
  } else {
    pc_atomic_cas(t) := true
  };
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := T:thread = t;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := false;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  l2s_d(t0) := true
}

step_finished = action(t:thread){
  l2s_d(t) := true;
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  assume pc_finished(t);
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := T:thread = t;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := false;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  l2s_d(t0) := true
}

step_atomic_cas = action(t:thread){
  l2s_d(t) := true;
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  assume pc_atomic_cas(t);
  pc_atomic_cas(t) := false;
  if locked {
    pc_futex_wait(t) := true
  } else {
    pc_atomic_store(t) := true;
    locked := true
  };
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := T:thread = t;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := false;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  l2s_d(t0) := true
}

step_kernel_wait = action(t:thread){
  l2s_d(t) := true;
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  assume pc_kernel_wait(t);
  if ~queue(t) {
    pc_kernel_wait(t) := false;
    pc_atomic_cas(t) := true
  };
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := T:thread = t;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  _old_l2s_g_3(V0) := l2s_g_3(V0);
  l2s_g_3(V0) := *;
  _old_l2s_g_4(V0) := l2s_g_4(V0);
  l2s_g_4(V0) := *;
  assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
  assume (forall V0. (~_old_l2s_g_3(V0) & ~scheduled(V0)) -> ~l2s_g_3(V0));
  assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
  assume (forall V0. (~_old_l2s_g_4(V0) & ~l2s_g_3(V0)) -> ~l2s_g_4(V0));
  scheduled(T) := false;
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  l2s_w_1(V0) := (l2s_w_1(V0) & ~scheduled(V0)) & ~l2s_g_3(V0);
  l2s_d(t0) := true
}

idle = action{
  if * {
    assume l2s_waiting;
    l2s_waiting := false;
    l2s_frozen := true;
    assume (forall V0. ~l2s_w_1(V0));
    assume ~l2s_w_0;
    l2s_a(X:thread) := l2s_d(X:thread)
  } else {
    if * {
      assume l2s_frozen;
      l2s_frozen := false;
      l2s_saved := true;
      l2s_s_1(V0) := pc_atomic_cas(V0);
      l2s_s_7(V0) := queue(V0);
      l2s_s_2(V0) := pc_atomic_store(V0);
      l2s_s_5(V0) := pc_futex_wake(V0);
      l2s_s_6(V0) := pc_kernel_wait(V0);
      l2s_s_4(V0) := pc_futex_wait(V0);
      l2s_s_0 := locked;
      l2s_s_3(V0) := pc_finished(V0);
      l2s_w_1(V0) := (l2s_d(V0:thread) & ~scheduled(V0)) & ~l2s_g_3(V0);
      l2s_w_0 := (~(forall T. d(T))) & ~l2s_g_1
    }
  };
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  l2s_d(t0) := true;
  assert ~((((((((((l2s_saved & (forall V0. ~l2s_w_1(V0))) & ~l2s_w_0) & (forall V0. l2s_a(V0) -> (l2s_s_1(V0) <-> pc_atomic_cas(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_7(V0) <-> queue(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_2(V0) <-> pc_atomic_store(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_5(V0) <-> pc_futex_wake(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_6(V0) <-> pc_kernel_wait(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_4(V0) <-> pc_futex_wait(V0)))) & (l2s_s_0 <-> locked)) & (forall V0. l2s_a(V0) -> (l2s_s_3(V0) <-> pc_finished(V0))))
}

in {
  pc_atomic_cas(T) := true;
  pc_futex_wait(T) := false;
  pc_kernel_wait(T) := false;
  pc_atomic_store(T) := false;
  pc_futex_wake(T) := false;
  pc_finished(T) := false;
  locked := false;
  queue(T) := false;
  scheduled(T) := false;
  d(T) := false;
  l2s_waiting := true;
  l2s_frozen := false;
  l2s_saved := false;
  l2s_d(t0) := true;
  l2s_w_1(V0) := (l2s_d(V0:thread) & ~scheduled(V0)) & ~l2s_g_3(V0);
  l2s_w_0 := (~(forall T. d(T))) & ~l2s_g_1;
  assume l2s_g_1 -> (~(forall T. d(T)));
  assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
  assume l2s_g_0 -> ~pc_finished(t0);
  assume (forall V0. l2s_g_3(V0) -> ~scheduled(V0));
  assume (forall V0. l2s_g_2(V0) -> ~pc_finished(V0));
  assume ~(((exists T0. l2s_g_2(T0)) -> (l2s_g_0 & ~l2s_g_1)) -> ((forall T. l2s_g_4(T)) -> (forall T. ~l2s_g_2(T))))
}
while *
  invariant [invar8] ((((pc_atomic_cas(T) | pc_futex_wait(T)) | pc_kernel_wait(T)) | pc_atomic_store(T)) | pc_futex_wake(T)) | pc_finished(T)
  invariant [invar9] ~pc_atomic_cas(T) | ~pc_futex_wait(T)
  invariant [invar10] ~pc_atomic_cas(T) | ~pc_kernel_wait(T)
  invariant [invar11] ~pc_atomic_cas(T) | ~pc_atomic_store(T)
  invariant [invar12] ~pc_atomic_cas(T) | ~pc_futex_wake(T)
  invariant [invar13] ~pc_atomic_cas(T) | ~pc_finished(T)
  invariant [invar14] ~pc_futex_wait(T) | ~pc_kernel_wait(T)
  invariant [invar15] ~pc_futex_wait(T) | ~pc_atomic_store(T)
  invariant [invar16] ~pc_futex_wait(T) | ~pc_futex_wake(T)
  invariant [invar17] ~pc_futex_wait(T) | ~pc_finished(T)
  invariant [invar18] ~pc_kernel_wait(T) | ~pc_atomic_store(T)
  invariant [invar19] ~pc_kernel_wait(T) | ~pc_futex_wake(T)
  invariant [invar20] ~pc_kernel_wait(T) | ~pc_finished(T)
  invariant [invar21] ~pc_atomic_store(T) | ~pc_futex_wake(T)
  invariant [invar22] ~pc_atomic_store(T) | ~pc_finished(T)
  invariant [invar23] ~pc_futex_wake(T) | ~pc_finished(T)
  invariant [invar24] (pc_atomic_store(T1) & pc_atomic_store(T2)) -> (T1 = T2)
  invariant [invar25] pc_atomic_store(T) -> locked
  invariant [invar28] ~scheduled(T)
  invariant [invar29] (l2s_waiting | l2s_frozen) | l2s_saved
  invariant [invar30] ~l2s_waiting | ~l2s_frozen
  invariant [invar31] ~l2s_waiting | ~l2s_saved
  invariant [invar32] ~l2s_frozen | ~l2s_saved
  invariant [invar33] l2s_saved -> (((((l2s_s_1(T) | l2s_s_4(T)) | l2s_s_6(T)) | l2s_s_2(T)) | l2s_s_5(T)) | l2s_s_3(T))
  invariant [invar34] l2s_saved -> (~l2s_s_1(T) | ~l2s_s_4(T))
  invariant [invar35] l2s_saved -> (~l2s_s_1(T) | ~l2s_s_6(T))
  invariant [invar36] l2s_saved -> (~l2s_s_1(T) | ~l2s_s_2(T))
  invariant [invar37] l2s_saved -> (~l2s_s_1(T) | ~l2s_s_5(T))
  invariant [invar38] l2s_saved -> (~l2s_s_1(T) | ~l2s_s_3(T))
  invariant [invar39] l2s_saved -> (~l2s_s_4(T) | ~l2s_s_6(T))
  invariant [invar40] l2s_saved -> (~l2s_s_4(T) | ~l2s_s_2(T))
  invariant [invar41] l2s_saved -> (~l2s_s_4(T) | ~l2s_s_5(T))
  invariant [invar42] l2s_saved -> (~l2s_s_4(T) | ~l2s_s_3(T))
  invariant [invar43] l2s_saved -> (~l2s_s_6(T) | ~l2s_s_2(T))
  invariant [invar44] l2s_saved -> (~l2s_s_6(T) | ~l2s_s_5(T))
  invariant [invar45] l2s_saved -> (~l2s_s_6(T) | ~l2s_s_3(T))
  invariant [invar46] l2s_saved -> (~l2s_s_2(T) | ~l2s_s_5(T))
  invariant [invar47] l2s_saved -> (~l2s_s_2(T) | ~l2s_s_3(T))
  invariant [invar48] l2s_saved -> (~l2s_s_5(T) | ~l2s_s_3(T))
  invariant [invar49] l2s_saved -> ((l2s_s_2(T1) & l2s_s_2(T2)) -> (T1 = T2))
  invariant [invar50] l2s_saved -> (l2s_s_2(T) -> l2s_s_0)
  invariant [invar51] l2s_g_4(T)
  invariant [invar52] l2s_g_0
  invariant [invar53] ~pc_finished(t0)
  invariant [invar54] ~l2s_g_1
  invariant [invar55] l2s_w_0 | (forall T. d(T))
  invariant [invar56] d(T) -> l2s_d(T)
  invariant [invar57] (l2s_frozen | l2s_saved) -> (forall T. l2s_d(T:thread))
  invariant [invar58] (l2s_frozen | l2s_saved) -> (forall T. l2s_a(T:thread))
  invariant [invar59] (l2s_saved & l2s_w_1(T)) -> (l2s_s_1(T) <-> pc_atomic_cas(T))
  invariant [invar60] (l2s_saved & l2s_w_1(T)) -> (l2s_s_4(T) <-> pc_futex_wait(T))
  invariant [invar61] (l2s_saved & l2s_w_1(T)) -> (l2s_s_6(T) <-> pc_kernel_wait(T))
  invariant [invar62] (l2s_saved & l2s_w_1(T)) -> (l2s_s_2(T) <-> pc_atomic_store(T))
  invariant [invar63] (l2s_saved & l2s_w_1(T)) -> (l2s_s_5(T) <-> pc_futex_wake(T))
  invariant [invar64] (l2s_saved & l2s_w_1(T)) -> (l2s_s_3(T) <-> pc_finished(T))
  invariant [invar65] queue(T) -> pc_kernel_wait(T)
  invariant [invar66] l2s_saved -> (l2s_s_7(T) -> l2s_s_6(T))
  invariant [atomic_store_progress] l2s_saved -> ((l2s_s_2(T) & ~l2s_w_1(T)) -> (pc_futex_wake(T) | pc_finished(T)))
  invariant [futex_wake_progress] l2s_saved -> ((l2s_s_5(T) & ~l2s_w_1(T)) -> pc_finished(T))
  invariant [finished_stable] l2s_saved -> (l2s_s_3(T) -> pc_finished(T))
  invariant [locked_thread] locked -> (exists T. pc_atomic_store(T))
  invariant [kernel_wait_exist] (forall T1. ((pc_kernel_wait(T1) & queue(T1)) & ~locked) -> (exists T2. (pc_futex_wake(T2) | pc_atomic_cas(T2)) | (pc_kernel_wait(T2) & ~queue(T2))))
  invariant [invar67] l2s_saved -> ((~l2s_s_0 & (forall T. ((l2s_s_1(T) | l2s_s_4(T)) | l2s_s_6(T)) -> ((pc_atomic_cas(T) | pc_futex_wait(T)) | pc_kernel_wait(T)))) -> ~locked)
  invariant [atomic_cas_progress] l2s_saved -> ((~l2s_s_0 & (forall T. ((l2s_s_1(T) | l2s_s_4(T)) | l2s_s_6(T)) -> ((pc_atomic_cas(T) | pc_futex_wait(T)) | pc_kernel_wait(T)))) -> (forall T. (l2s_s_1(T) & ~l2s_w_1(T)) -> false))
  invariant [futex_wait_progress] l2s_saved -> ((~l2s_s_0 & (forall T. ((l2s_s_1(T) | l2s_s_4(T)) | l2s_s_6(T)) -> ((pc_atomic_cas(T) | pc_futex_wait(T)) | pc_kernel_wait(T)))) -> (forall T. (l2s_s_4(T) & ~l2s_w_1(T)) -> pc_atomic_cas(T)))
  invariant [kernel_wait_unqueued] l2s_saved -> ((~l2s_s_0 & (forall T. ((l2s_s_1(T) | l2s_s_4(T)) | l2s_s_6(T)) -> ((pc_atomic_cas(T) | pc_futex_wait(T)) | pc_kernel_wait(T)))) -> (forall T. ((l2s_s_6(T) & ~l2s_s_7(T)) & ~l2s_w_1(T)) -> pc_atomic_cas(T)))
  invariant [invar68] l2s_saved -> ((~l2s_s_0 & (forall T. ((l2s_s_1(T) | l2s_s_4(T)) | l2s_s_6(T)) -> ((pc_atomic_cas(T) | pc_futex_wait(T)) | pc_kernel_wait(T)))) -> (forall T. ~l2s_s_7(T) -> ~queue(T)))

