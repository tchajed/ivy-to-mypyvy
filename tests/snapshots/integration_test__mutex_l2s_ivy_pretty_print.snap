---
source: tests/integration_test.rs
expression: output
---
let
ext:mutex_protocol.step_atomic_store = action(fml:t:mutex_protocol.thread){l2s_d(fml:t) := true;
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
assume mutex_protocol.pc_atomic_store(fml:t);
mutex_protocol.pc_atomic_store(fml:t) := false;
mutex_protocol.pc_futex_wake(fml:t) := true;
mutex_protocol.locked := false;
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := false;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_d(mutex_protocol.t0) := true}
ext:mutex_protocol.step_futex_wake = action(fml:t:mutex_protocol.thread){l2s_d(fml:t) := true;
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
assume mutex_protocol.pc_futex_wake(fml:t);
mutex_protocol.pc_futex_wake(fml:t) := false;
if (some loc:t0. mutex_protocol.queue(loc:t0))
{mutex_protocol.queue(loc:t0) := false};
_old_l2s_g_0 := l2s_g_0;
l2s_g_0 := *;
_old_l2s_g_2(V0) := l2s_g_2(V0);
l2s_g_2(V0) := *;
assume _old_l2s_g_0 -> l2s_g_0;
assume ~(_old_l2s_g_0 & (~(mutex_protocol.pc_finished(mutex_protocol.t0) -> ~l2s_g_0)));
assume (forall V0. _old_l2s_g_2(V0) -> l2s_g_2(V0));
assume (forall V0. ~(_old_l2s_g_2(V0) & (~(mutex_protocol.pc_finished(V0) -> ~l2s_g_2(V0)))));
mutex_protocol.pc_finished(fml:t) := true;
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := false;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_d(mutex_protocol.t0) := true}
ext:mutex_protocol.step_futex_wait = action(fml:t:mutex_protocol.thread){l2s_d(fml:t) := true;
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
assume mutex_protocol.pc_futex_wait(fml:t);
mutex_protocol.pc_futex_wait(fml:t) := false;
if mutex_protocol.locked
{mutex_protocol.pc_kernel_wait(fml:t) := true;
mutex_protocol.queue(fml:t) := true}
else {mutex_protocol.pc_atomic_cas(fml:t) := true};
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := false;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_d(mutex_protocol.t0) := true}
ext:mutex_protocol.step_finished = action(fml:t:mutex_protocol.thread){l2s_d(fml:t) := true;
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
assume mutex_protocol.pc_finished(fml:t);
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := false;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_d(mutex_protocol.t0) := true}
ext:mutex_protocol.step_atomic_cas = action(fml:t:mutex_protocol.thread){l2s_d(fml:t) := true;
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
assume mutex_protocol.pc_atomic_cas(fml:t);
mutex_protocol.pc_atomic_cas(fml:t) := false;
if mutex_protocol.locked
{mutex_protocol.pc_futex_wait(fml:t) := true}
else {mutex_protocol.pc_atomic_store(fml:t) := true;
mutex_protocol.locked := true};
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := false;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_d(mutex_protocol.t0) := true}
ext:mutex_protocol.step_kernel_wait = action(fml:t:mutex_protocol.thread){l2s_d(fml:t) := true;
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
assume mutex_protocol.pc_kernel_wait(fml:t);
if ~mutex_protocol.queue(fml:t)
{mutex_protocol.pc_kernel_wait(fml:t) := false;
mutex_protocol.pc_atomic_cas(fml:t) := true};
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
_old_l2s_g_3(V0) := l2s_g_3(V0);
l2s_g_3(V0) := *;
_old_l2s_g_4(V0) := l2s_g_4(V0);
l2s_g_4(V0) := *;
assume (forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0));
assume (forall V0. ~(_old_l2s_g_3(V0) & (~(mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0)))));
assume (forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0));
assume (forall V0. ~(_old_l2s_g_4(V0) & (~(l2s_g_3(V0) -> ~l2s_g_4(V0)))));
mutex_protocol.scheduled(T) := false;
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
l2s_w_1(V0) := l2s_w_1(V0) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_d(mutex_protocol.t0) := true}
idle = action{if *
{assume l2s_waiting;
l2s_waiting := false;
l2s_frozen := true;
assume (forall V0. ~l2s_w_1(V0));
assume ~l2s_w_0;
l2s_a(X:mutex_protocol.thread) := l2s_d(X:mutex_protocol.thread)}
else {if *
{assume l2s_frozen;
l2s_frozen := false;
l2s_saved := true;
l2s_s_1(V0) := mutex_protocol.pc_atomic_cas(V0);
l2s_s_7(V0) := mutex_protocol.queue(V0);
l2s_s_2(V0) := mutex_protocol.pc_atomic_store(V0);
l2s_s_5(V0) := mutex_protocol.pc_futex_wake(V0);
l2s_s_6(V0) := mutex_protocol.pc_kernel_wait(V0);
l2s_s_4(V0) := mutex_protocol.pc_futex_wait(V0);
l2s_s_0 := mutex_protocol.locked;
l2s_s_3(V0) := mutex_protocol.pc_finished(V0);
l2s_w_1(V0) := l2s_d(V0:mutex_protocol.thread) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_w_0 := ~((forall T. mutex_protocol.d(T)) & ~l2s_g_1)}};
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
l2s_d(mutex_protocol.t0) := true;
assert ~((l2s_saved & (forall V0. ~l2s_w_1(V0))) & (~((((((((l2s_w_0 & (forall V0. l2s_a(V0) -> (l2s_s_1(V0) <-> mutex_protocol.pc_atomic_cas(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_7(V0) <-> mutex_protocol.queue(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_2(V0) <-> mutex_protocol.pc_atomic_store(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_5(V0) <-> mutex_protocol.pc_futex_wake(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_6(V0) <-> mutex_protocol.pc_kernel_wait(V0)))) & (forall V0. l2s_a(V0) -> (l2s_s_4(V0) <-> mutex_protocol.pc_futex_wait(V0)))) & (l2s_s_0 <-> mutex_protocol.locked)) & (forall V0. l2s_a(V0) -> (l2s_s_3(V0) <-> mutex_protocol.pc_finished(V0))))))}
in
{mutex_protocol.pc_atomic_cas(T) := true;
mutex_protocol.pc_futex_wait(T) := false;
mutex_protocol.pc_kernel_wait(T) := false;
mutex_protocol.pc_atomic_store(T) := false;
mutex_protocol.pc_futex_wake(T) := false;
mutex_protocol.pc_finished(T) := false;
mutex_protocol.locked := false;
mutex_protocol.queue(T) := false;
mutex_protocol.scheduled(T) := false;
mutex_protocol.d(T) := false;
l2s_waiting := true;
l2s_frozen := false;
l2s_saved := false;
l2s_d(mutex_protocol.t0) := true;
l2s_w_1(V0) := l2s_d(V0:mutex_protocol.thread) & (~(mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)));
l2s_w_0 := ~((forall T. mutex_protocol.d(T)) & ~l2s_g_1);
assume l2s_g_1 -> (~(forall T. mutex_protocol.d(T)));
assume (forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0));
assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
assume (forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0));
assume (forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0));
assume ~(((exists T0. l2s_g_2(T0)) -> l2s_g_0) & (~(l2s_g_1 -> ((forall T. l2s_g_4(T)) -> (forall T. ~l2s_g_2(T))))))}

