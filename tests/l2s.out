



let
    ext:mutex_protocol.step_atomic_store = action(fml:t:mutex_protocol.thread){{l2s_d(fml:t) := true;
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 {{{{assume mutex_protocol.pc_atomic_store(fml:t)};
 {mutex_protocol.pc_atomic_store(fml:t) := false};
 {mutex_protocol.pc_futex_wake(fml:t) := true};
 {mutex_protocol.locked := false};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := false};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)}}}};
 l2s_d(mutex_protocol.t0) := true}}
    ext:mutex_protocol.step_futex_wake = action(fml:t:mutex_protocol.thread){{l2s_d(fml:t) := true;
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 {{{{assume mutex_protocol.pc_futex_wake(fml:t)};
 {mutex_protocol.pc_futex_wake(fml:t) := false};
 {if some loc:t_q. mutex_protocol.queue(loc:t_q) {mutex_protocol.queue(loc:t_q) := false}};
 {{_old_l2s_g_0 := l2s_g_0;
 l2s_g_0 := *;
 _old_l2s_g_2(V0) := l2s_g_2(V0);
 l2s_g_2(V0) := *;
 assume _old_l2s_g_0 -> l2s_g_0;
 assume ~_old_l2s_g_0 & ~mutex_protocol.pc_finished(mutex_protocol.t0) -> ~l2s_g_0;
 assume forall V0. _old_l2s_g_2(V0) -> l2s_g_2(V0);
 assume forall V0. ~_old_l2s_g_2(V0) & ~mutex_protocol.pc_finished(V0) -> ~l2s_g_2(V0);
 mutex_protocol.pc_finished(fml:t) := true};
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := false};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)}}}};
 l2s_d(mutex_protocol.t0) := true}}
    ext:mutex_protocol.step_futex_wait = action(fml:t:mutex_protocol.thread){{l2s_d(fml:t) := true;
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 {{{{assume mutex_protocol.pc_futex_wait(fml:t)};
 {mutex_protocol.pc_futex_wait(fml:t) := false};
 {if mutex_protocol.locked {{{mutex_protocol.pc_kernel_wait(fml:t) := true};
 {mutex_protocol.queue(fml:t) := true}}}
else {mutex_protocol.pc_atomic_cas(fml:t) := true}};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := false};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)}}}};
 l2s_d(mutex_protocol.t0) := true}}
    ext:mutex_protocol.step_finished = action(fml:t:mutex_protocol.thread){{l2s_d(fml:t) := true;
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 {{{{assume mutex_protocol.pc_finished(fml:t)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := false};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)}}}};
 l2s_d(mutex_protocol.t0) := true}}
    ext:mutex_protocol.step_atomic_cas = action(fml:t:mutex_protocol.thread){{l2s_d(fml:t) := true;
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 {{{{assume mutex_protocol.pc_atomic_cas(fml:t)};
 {mutex_protocol.pc_atomic_cas(fml:t) := false};
 {if mutex_protocol.locked {mutex_protocol.pc_futex_wait(fml:t) := true}
else {{{mutex_protocol.pc_atomic_store(fml:t) := true};
 {mutex_protocol.locked := true}}}};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := false};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)}}}};
 l2s_d(mutex_protocol.t0) := true}}
    ext:mutex_protocol.step_kernel_wait = action(fml:t:mutex_protocol.thread){{l2s_d(fml:t) := true;
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 {{{{assume mutex_protocol.pc_kernel_wait(fml:t)};
 {if ~mutex_protocol.queue(fml:t) {{{mutex_protocol.pc_kernel_wait(fml:t) := false};
 {mutex_protocol.pc_atomic_cas(fml:t) := true}}}};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := T:mutex_protocol.thread = fml:t};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)};
 {{_old_l2s_g_3(V0) := l2s_g_3(V0);
 l2s_g_3(V0) := *;
 _old_l2s_g_4(V0) := l2s_g_4(V0);
 l2s_g_4(V0) := *;
 assume forall V0. _old_l2s_g_3(V0) -> l2s_g_3(V0);
 assume forall V0. ~_old_l2s_g_3(V0) & ~mutex_protocol.scheduled(V0) -> ~l2s_g_3(V0);
 assume forall V0. _old_l2s_g_4(V0) -> l2s_g_4(V0);
 assume forall V0. ~_old_l2s_g_4(V0) & ~l2s_g_3(V0) -> ~l2s_g_4(V0);
 mutex_protocol.scheduled(T) := false};
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 l2s_w_1(V0) := l2s_w_1(V0) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0)}}}};
 l2s_d(mutex_protocol.t0) := true}}
    idle = action{{if * {assume l2s_waiting;
 l2s_waiting := false;
 l2s_frozen := true;
 assume forall V0. ~l2s_w_1(V0);
 assume ~l2s_w_0;
 l2s_a(X:mutex_protocol.thread) := l2s_d(X:mutex_protocol.thread)}
else if * {assume l2s_frozen;
 l2s_frozen := false;
 l2s_saved := true;
 l2s_s_1(V0) := mutex_protocol.pc_atomic_cas(V0);
 l2s_s_7(V0) := mutex_protocol.queue(V0);
 l2s_s_2(V0) := mutex_protocol.pc_atomic_store(V0);
 l2s_s_5(V0) := mutex_protocol.pc_futex_wake(V0);
 l2s_s_6(V0) := mutex_protocol.pc_kernel_wait(V0);
 l2s_s_4(V0) := mutex_protocol.pc_futex_wait(V0);
 l2s_s_0 := mutex_protocol.locked;
 l2s_s_3(V0) := mutex_protocol.pc_finished(V0);
 l2s_w_1(V0) := l2s_d(V0:mutex_protocol.thread) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0);
 l2s_w_0 := ~(forall T. mutex_protocol.d(T)) & ~l2s_g_1}
else {};
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 l2s_d(mutex_protocol.t0) := true;
 assert ~(l2s_saved & (forall V0. ~l2s_w_1(V0)) & ~l2s_w_0 & (forall V0. l2s_a(V0) -> (l2s_s_1(V0) <-> mutex_protocol.pc_atomic_cas(V0))) & (forall V0. l2s_a(V0) -> (l2s_s_7(V0) <-> mutex_protocol.queue(V0))) & (forall V0. l2s_a(V0) -> (l2s_s_2(V0) <-> mutex_protocol.pc_atomic_store(V0))) & (forall V0. l2s_a(V0) -> (l2s_s_5(V0) <-> mutex_protocol.pc_futex_wake(V0))) & (forall V0. l2s_a(V0) -> (l2s_s_6(V0) <-> mutex_protocol.pc_kernel_wait(V0))) & (forall V0. l2s_a(V0) -> (l2s_s_4(V0) <-> mutex_protocol.pc_futex_wait(V0))) & (l2s_s_0 <-> mutex_protocol.locked) & (forall V0. l2s_a(V0) -> (l2s_s_3(V0) <-> mutex_protocol.pc_finished(V0))))}}
in
    {{{mutex_protocol.pc_atomic_cas(T) := true;
 mutex_protocol.pc_futex_wait(T) := false;
 mutex_protocol.pc_kernel_wait(T) := false;
 mutex_protocol.pc_atomic_store(T) := false;
 mutex_protocol.pc_futex_wake(T) := false;
 mutex_protocol.pc_finished(T) := false;
 mutex_protocol.locked := false;
 mutex_protocol.queue(T) := false;
 mutex_protocol.scheduled(T) := false};
 mutex_protocol.d(T) := false};
 l2s_waiting := true;
 l2s_frozen := false;
 l2s_saved := false;
 l2s_d(mutex_protocol.t0) := true;
 l2s_w_1(V0) := l2s_d(V0:mutex_protocol.thread) & ~mutex_protocol.scheduled(V0) & ~l2s_g_3(V0);
 l2s_w_0 := ~(forall T. mutex_protocol.d(T)) & ~l2s_g_1;
 assume l2s_g_1 -> ~(forall T. mutex_protocol.d(T));
 assume forall V0. l2s_g_4(V0) -> ~l2s_g_3(V0);
 assume l2s_g_0 -> ~mutex_protocol.pc_finished(mutex_protocol.t0);
 assume forall V0. l2s_g_3(V0) -> ~mutex_protocol.scheduled(V0);
 assume forall V0. l2s_g_2(V0) -> ~mutex_protocol.pc_finished(V0);
 assume ~((exists T0. l2s_g_2(T0)) -> l2s_g_0 & ~l2s_g_1 -> ((forall T. l2s_g_4(T)) -> (forall T. ~l2s_g_2(T))))}
    while *
        invariant [mutex_protocol.invar8] mutex_protocol.pc_atomic_cas(T) | mutex_protocol.pc_futex_wait(T) | mutex_protocol.pc_kernel_wait(T) | mutex_protocol.pc_atomic_store(T) | mutex_protocol.pc_futex_wake(T) | mutex_protocol.pc_finished(T)
        invariant [mutex_protocol.invar9] ~mutex_protocol.pc_atomic_cas(T) | ~mutex_protocol.pc_futex_wait(T)
        invariant [mutex_protocol.invar10] ~mutex_protocol.pc_atomic_cas(T) | ~mutex_protocol.pc_kernel_wait(T)
        invariant [mutex_protocol.invar11] ~mutex_protocol.pc_atomic_cas(T) | ~mutex_protocol.pc_atomic_store(T)
        invariant [mutex_protocol.invar12] ~mutex_protocol.pc_atomic_cas(T) | ~mutex_protocol.pc_futex_wake(T)
        invariant [mutex_protocol.invar13] ~mutex_protocol.pc_atomic_cas(T) | ~mutex_protocol.pc_finished(T)
        invariant [mutex_protocol.invar14] ~mutex_protocol.pc_futex_wait(T) | ~mutex_protocol.pc_kernel_wait(T)
        invariant [mutex_protocol.invar15] ~mutex_protocol.pc_futex_wait(T) | ~mutex_protocol.pc_atomic_store(T)
        invariant [mutex_protocol.invar16] ~mutex_protocol.pc_futex_wait(T) | ~mutex_protocol.pc_futex_wake(T)
        invariant [mutex_protocol.invar17] ~mutex_protocol.pc_futex_wait(T) | ~mutex_protocol.pc_finished(T)
        invariant [mutex_protocol.invar18] ~mutex_protocol.pc_kernel_wait(T) | ~mutex_protocol.pc_atomic_store(T)
        invariant [mutex_protocol.invar19] ~mutex_protocol.pc_kernel_wait(T) | ~mutex_protocol.pc_futex_wake(T)
        invariant [mutex_protocol.invar20] ~mutex_protocol.pc_kernel_wait(T) | ~mutex_protocol.pc_finished(T)
        invariant [mutex_protocol.invar21] ~mutex_protocol.pc_atomic_store(T) | ~mutex_protocol.pc_futex_wake(T)
        invariant [mutex_protocol.invar22] ~mutex_protocol.pc_atomic_store(T) | ~mutex_protocol.pc_finished(T)
        invariant [mutex_protocol.invar23] ~mutex_protocol.pc_futex_wake(T) | ~mutex_protocol.pc_finished(T)
        invariant [mutex_protocol.invar24] mutex_protocol.pc_atomic_store(T1) & mutex_protocol.pc_atomic_store(T2) -> T1 = T2
        invariant [mutex_protocol.invar25] mutex_protocol.pc_atomic_store(T) -> mutex_protocol.locked
        invariant [invar28] ~mutex_protocol.scheduled(T)
        invariant [invar29] l2s_waiting | l2s_frozen | l2s_saved
        invariant [invar30] ~l2s_waiting | ~l2s_frozen
        invariant [invar31] ~l2s_waiting | ~l2s_saved
        invariant [invar32] ~l2s_frozen | ~l2s_saved
        invariant [invar33] l2s_saved -> l2s_s_1(T) | l2s_s_4(T) | l2s_s_6(T) | l2s_s_2(T) | l2s_s_5(T) | l2s_s_3(T)
        invariant [invar34] l2s_saved -> ~l2s_s_1(T) | ~l2s_s_4(T)
        invariant [invar35] l2s_saved -> ~l2s_s_1(T) | ~l2s_s_6(T)
        invariant [invar36] l2s_saved -> ~l2s_s_1(T) | ~l2s_s_2(T)
        invariant [invar37] l2s_saved -> ~l2s_s_1(T) | ~l2s_s_5(T)
        invariant [invar38] l2s_saved -> ~l2s_s_1(T) | ~l2s_s_3(T)
        invariant [invar39] l2s_saved -> ~l2s_s_4(T) | ~l2s_s_6(T)
        invariant [invar40] l2s_saved -> ~l2s_s_4(T) | ~l2s_s_2(T)
        invariant [invar41] l2s_saved -> ~l2s_s_4(T) | ~l2s_s_5(T)
        invariant [invar42] l2s_saved -> ~l2s_s_4(T) | ~l2s_s_3(T)
        invariant [invar43] l2s_saved -> ~l2s_s_6(T) | ~l2s_s_2(T)
        invariant [invar44] l2s_saved -> ~l2s_s_6(T) | ~l2s_s_5(T)
        invariant [invar45] l2s_saved -> ~l2s_s_6(T) | ~l2s_s_3(T)
        invariant [invar46] l2s_saved -> ~l2s_s_2(T) | ~l2s_s_5(T)
        invariant [invar47] l2s_saved -> ~l2s_s_2(T) | ~l2s_s_3(T)
        invariant [invar48] l2s_saved -> ~l2s_s_5(T) | ~l2s_s_3(T)
        invariant [invar49] l2s_saved -> (l2s_s_2(T1) & l2s_s_2(T2) -> T1 = T2)
        invariant [invar50] l2s_saved -> (l2s_s_2(T) -> l2s_s_0)
        invariant [invar51] l2s_g_4(T)
        invariant [invar52] l2s_g_0
        invariant [invar53] ~mutex_protocol.pc_finished(mutex_protocol.t0)
        invariant [invar54] ~l2s_g_1
        invariant [invar55] l2s_w_0 | (forall T. mutex_protocol.d(T))
        invariant [invar56] mutex_protocol.d(T) -> l2s_d(T)
        invariant [invar57] l2s_frozen | l2s_saved -> (forall T. l2s_d(T:mutex_protocol.thread))
        invariant [invar58] l2s_frozen | l2s_saved -> (forall T. l2s_a(T:mutex_protocol.thread))
        invariant [invar59] l2s_saved & l2s_w_1(T) -> (l2s_s_1(T) <-> mutex_protocol.pc_atomic_cas(T))
        invariant [invar60] l2s_saved & l2s_w_1(T) -> (l2s_s_4(T) <-> mutex_protocol.pc_futex_wait(T))
        invariant [invar61] l2s_saved & l2s_w_1(T) -> (l2s_s_6(T) <-> mutex_protocol.pc_kernel_wait(T))
        invariant [invar62] l2s_saved & l2s_w_1(T) -> (l2s_s_2(T) <-> mutex_protocol.pc_atomic_store(T))
        invariant [invar63] l2s_saved & l2s_w_1(T) -> (l2s_s_5(T) <-> mutex_protocol.pc_futex_wake(T))
        invariant [invar64] l2s_saved & l2s_w_1(T) -> (l2s_s_3(T) <-> mutex_protocol.pc_finished(T))
        invariant [invar65] mutex_protocol.queue(T) -> mutex_protocol.pc_kernel_wait(T)
        invariant [invar66] l2s_saved -> (l2s_s_7(T) -> l2s_s_6(T))
        invariant [atomic_store_progress] l2s_saved -> (l2s_s_2(T) & ~l2s_w_1(T) -> mutex_protocol.pc_futex_wake(T) | mutex_protocol.pc_finished(T))
        invariant [futex_wake_progress] l2s_saved -> (l2s_s_5(T) & ~l2s_w_1(T) -> mutex_protocol.pc_finished(T))
        invariant [finished_stable] l2s_saved -> (l2s_s_3(T) -> mutex_protocol.pc_finished(T))
        invariant [locked_thread] mutex_protocol.locked -> (exists T. mutex_protocol.pc_atomic_store(T))
        invariant [kernel_wait_exist] forall T1. mutex_protocol.pc_kernel_wait(T1) & mutex_protocol.queue(T1) & ~mutex_protocol.locked -> (exists T2. mutex_protocol.pc_futex_wake(T2) | mutex_protocol.pc_atomic_cas(T2) | mutex_protocol.pc_kernel_wait(T2) & ~mutex_protocol.queue(T2))
        invariant [invar67] l2s_saved -> (~l2s_s_0 & (forall T. l2s_s_1(T) | l2s_s_4(T) | l2s_s_6(T) -> mutex_protocol.pc_atomic_cas(T) | mutex_protocol.pc_futex_wait(T) | mutex_protocol.pc_kernel_wait(T)) -> ~mutex_protocol.locked)
        invariant [atomic_cas_progress] l2s_saved -> (~l2s_s_0 & (forall T. l2s_s_1(T) | l2s_s_4(T) | l2s_s_6(T) -> mutex_protocol.pc_atomic_cas(T) | mutex_protocol.pc_futex_wait(T) | mutex_protocol.pc_kernel_wait(T)) -> (forall T. l2s_s_1(T) & ~l2s_w_1(T) -> false))
        invariant [futex_wait_progress] l2s_saved -> (~l2s_s_0 & (forall T. l2s_s_1(T) | l2s_s_4(T) | l2s_s_6(T) -> mutex_protocol.pc_atomic_cas(T) | mutex_protocol.pc_futex_wait(T) | mutex_protocol.pc_kernel_wait(T)) -> (forall T. l2s_s_4(T) & ~l2s_w_1(T) -> mutex_protocol.pc_atomic_cas(T)))
        invariant [kernel_wait_unqueued] l2s_saved -> (~l2s_s_0 & (forall T. l2s_s_1(T) | l2s_s_4(T) | l2s_s_6(T) -> mutex_protocol.pc_atomic_cas(T) | mutex_protocol.pc_futex_wait(T) | mutex_protocol.pc_kernel_wait(T)) -> (forall T. l2s_s_6(T) & ~l2s_s_7(T) & ~l2s_w_1(T) -> mutex_protocol.pc_atomic_cas(T)))
        invariant [invar68] l2s_saved -> (~l2s_s_0 & (forall T. l2s_s_1(T) | l2s_s_4(T) | l2s_s_6(T) -> mutex_protocol.pc_atomic_cas(T) | mutex_protocol.pc_futex_wait(T) | mutex_protocol.pc_kernel_wait(T)) -> (forall T. ~l2s_s_7(T) -> ~mutex_protocol.queue(T)))
