// basic tokenization
char = { ASCII_ALPHANUMERIC | "_" | ":" }
WHITESPACE = _{ " " | "\t" | NEWLINE }
// periods can only be in the middle of identifiers
// (to disambiguate the period in forall T. e)
ident = @{ char+ ~ ("." ~ char+)* }

// the top-level rule
file = { SOI ~ action_def* ~ EOI }

action_def = { ident ~ "=" ~  action }
action = { "action" ~ ("(" ~ ident ~ ")")? ~ step_block }
step_block_or_step = _{ step_block | step }
step_block = {
  // an empty step block
  "{" ~ "}"
  | "{" ~ step_block_or_step ~
    (";" ~ step_block_or_step)* ~ "}"
}

step = { assign | assume | assert | if_step }

call_expr = { ident ~ "(" ~ ident ~ ")" }
relation = _{ call_expr | ident }
assign = { relation ~ ":=" ~ expr }
assume = {  "assume" ~ expr }
assert = {  "assert" ~ expr }
if_step = {
  "if" ~ expr ~ step_block_or_step ~
  ("else" ~ step_block_or_step)?
}

expr = { prefix* ~ term ~ (infix ~ prefix* ~ term)* }

// the infix/prefix operators
infix = _{ and | or | implies | iff | equal }
and = { "&" }
or = { "|" }
implies = { "->" }
iff = { "<->" }
equal = { "=" }
prefix = _{ not }
not = { "~" }

// remaining expression constructs
quantifier = _{ forall | some }
forall = { "forall" }
some = { "some" }
quantified_expr = { quantifier ~ ident  ~ "." ~ expr }
havoc_expr = { "*" }
base_expr =  _{ quantified_expr | havoc_expr | relation }
term = _{ base_expr | "(" ~ expr ~ ")" }
